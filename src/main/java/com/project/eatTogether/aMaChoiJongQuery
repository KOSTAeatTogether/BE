[찐최종?SQL]

create database eattogether;

use eattogether;


CREATE TABLE user_role (
    role_name VARCHAR(20) PRIMARY KEY,
    description VARCHAR(100) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 기본 role 데이터 삽입 => role_name 이름 논의 필
INSERT INTO user_role (role_name, description) VALUES
('ADMIN', '관리자'),
('OWNER', '식당점주'),
('USER', '일반사용자');


CREATE TABLE rs_amenities (
   rs_amenity_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_amenity_name VARCHAR(255) NOT NULL
);

CREATE TABLE rs_coordinates (
   rs_coordinates_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   restaurant_lat FLOAT,
   restaurant_long FLOAT,
   restaurant_addr VARCHAR(255)
);

CREATE TABLE rs_cuisine_categories (
   rs_cuisine_category_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_cuisine_category_name VARCHAR(255) NOT NULL
);

CREATE TABLE rs_location_categories (
   rs_location_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_location_name VARCHAR(255)
);

CREATE TABLE rs_document (
   rs_document_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_document_certificate VARCHAR(255),
   rs_document_business_id VARCHAR(255)
);

CREATE TABLE rs_group (
   rs_group_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_group_name VARCHAR(255) NOT NULL,
   rs_group_created_at DATETIME NOT NULL,
   rs_group_updated_at DATE,
   rs_group_deleted_at DATE
);

CREATE TABLE pictures (
   uuid VARCHAR(255) PRIMARY KEY,
   path VARCHAR(255),
   origin VARCHAR(255),
   field VARCHAR(255)
);

CREATE TABLE memo (
   memo_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   memo_content VARCHAR(255),
   memo_created_at DATETIME NOT NULL,
   memo_updated_at DATETIME,
   memo_deleted_at DATETIME
);

CREATE TABLE rs_restaurant (
	rs_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_name VARCHAR(255) NOT NULL,
   rs_phone VARCHAR(255) NOT NULL,
   rs_park VARCHAR(255),
   rs_time VARCHAR(255),
   rs_state VARCHAR(255),
   rs_review_count VARCHAR(255),
   rs_bookmark_count INT,
   rs_avg_rate INT,
   rs_reservation_count INT,
   rs_coordinates_id BIGINT UNIQUE,
   rs_cuisine_categories_id BIGINT UNIQUE,
   rs_document_id BIGINT UNIQUE,
   rs_location_categories_id BIGINT UNIQUE,
   FOREIGN KEY (rs_coordinates_id) REFERENCES rs_coordinates(rs_coordinates_id),
   FOREIGN KEY (rs_cuisine_categories_id) REFERENCES rs_cuisine_categories(rs_cuisine_category_id),
   FOREIGN KEY (rs_document_id) REFERENCES rs_document(rs_document_id),
   FOREIGN KEY (rs_location_categories_id) REFERENCES rs_location_categories(rs_location_id)
);



CREATE TABLE user (
    user_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_email VARCHAR(255) NOT NULL,
    user_name VARCHAR(255) NOT NULL,
    user_pw VARCHAR(255) NOT NULL,
    user_phone VARCHAR(50) NOT NULL,
    user_state VARCHAR(50) NOT NULL,
    user_nick_name VARCHAR(255) NOT NULL,
    user_birthday DATE NOT NULL,
    user_gender VARCHAR(10) NOT NULL,
    user_photo_origin VARCHAR(255),
    user_photo_path VARCHAR(255),
    user_photo_name VARCHAR(255),
    user_grade VARCHAR(50) NOT NULL,
    user_follower INT DEFAULT 0,
    user_following INT DEFAULT 0,
    user_auth VARCHAR(255),
    user_created_at DATETIME NOT NULL,
    user_updated_at DATETIME,
    user_deleted_at DATETIME,
    role ENUM('ADMIN', 'OWNER', 'USER') NOT NULL DEFAULT 'USER'
);

CREATE TABLE queue (
   queue_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   queue_number INT NOT NULL,
   queue_date DATE NOT NULL,
   queue_time TIME NOT NULL,
   queue_state VARCHAR(255) NOT NULL,
   queue_created_at DATETIME NOT NULL,
   queue_updated_at DATETIME,
   queue_deleted_at DATETIME,
   is_prepaid BOOLEAN NOT NULL DEFAULT FALSE,
   rs_id BIGINT,
   user_id BIGINT,
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id),
   FOREIGN KEY (user_id) REFERENCES user(user_id)
);

CREATE TABLE cart (
   cart_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   user_id BIGINT NOT NULL,
   rs_id BIGINT NOT NULL,
   queue_id BIGINT,
   cart_amount INT NOT NULL,
   cart_created_at DATETIME NOT NULL,
   cart_updated_at DATETIME,
   cart_deleted_at DATETIME,
   cart_status ENUM('ACTIVE', 'ORDERED', 'CANCELLED') NOT NULL DEFAULT 'ACTIVE',
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id),
   FOREIGN KEY (user_id) REFERENCES user(user_id),
   FOREIGN KEY (queue_id) REFERENCES queue(queue_id)
);




CREATE TABLE follow (
   follow_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   following_id VARCHAR(255) NOT NULL,
   user_id BIGINT,
   FOREIGN KEY (user_id) REFERENCES user(user_id)
);

CREATE TABLE user_group_mapping (
   user_group_mapping_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   user_group_mapping_created_at DATE NOT NULL,
   user_group_mapping_updated_at DATE,
   user_group_mapping_deleted_at DATE,
   user_id BIGINT,
   rs_group_id BIGINT,
   FOREIGN KEY (user_id) REFERENCES user(user_id),
   FOREIGN KEY (rs_group_id) REFERENCES rs_group(rs_group_id)
);

CREATE TABLE rs_table (
   rs_table_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_table_size INT,
   rs_table_state VARCHAR(255),
   rs_table_created_at DATETIME NOT NULL,
   rs_table_updated_at DATETIME,
   rs_table_deleted_at DATETIME,
   rs_id BIGINT,
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

CREATE TABLE rs_menus (
   rs_menu_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_menu_name VARCHAR(255) NOT NULL,
   rs_menu_desc VARCHAR(255),
   rs_menu_price VARCHAR(255) NOT NULL,
   rs_menu_isfeatured BOOLEAN NOT NULL DEFAULT false,
   rs_menu_state VARCHAR(255),
   rs_menu_appear VARCHAR(255),
   rs_menu_photo_origin VARCHAR(255),
   rs_menu_photo_path VARCHAR(255),
   rs_menu_photo_name VARCHAR(255),
   rs_menu_created_at DATETIME NOT NULL,
   rs_menu_updated_at DATETIME,
   rs_menu_deleted_at DATETIME,
   rs_id BIGINT,
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

CREATE TABLE rs_news (
   rs_news_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_news_content VARCHAR(255),
   rs_news_published_created_at DATETIME,
   rs_news_updated_at DATETIME,
   rs_news_deleted_at DATETIME,
   rs_id BIGINT,
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

CREATE TABLE rs_restaurant_amenities_mapping (
   rs_restaurant_amenities_mapping_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_id BIGINT,
   rs_amenities_id BIGINT,
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id),
   FOREIGN KEY (rs_amenities_id) REFERENCES rs_amenities(rs_amenity_id)
);





CREATE TABLE bookmark (
    bookmark_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    bookmark_created_at DATETIME NOT NULL,
    bookmark_updated_at DATETIME,
    bookmark_deleted_at DATETIME,
    user_id BIGINT,
    memo_id BIGINT UNIQUE,
    rs_id BIGINT,
    FOREIGN KEY (user_id) REFERENCES user(user_id),
    FOREIGN KEY (memo_id) REFERENCES memo(memo_id),
    FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

-- 1. rs_review 테이블 먼저 생성 (review_declare 참조 제거)
CREATE TABLE rs_review (
    rs_review_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    rs_review_rate TINYINT,
    rs_review_created_at DATE NOT NULL,
    rs_review_state VARCHAR(255),
    rs_review_like BIGINT,
    user_id BIGINT NOT NULL,
    rs_id BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user(user_id),
    FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

-- 2. 그 다음 review_declare 테이블 생성 (리뷰를 참조)
CREATE TABLE review_declare (
    review_declare_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    rs_review_id BIGINT UNIQUE,  -- 하나의 리뷰는 하나의 신고만 가능
    review_declare_content VARCHAR(255),
    review_declare_created_at DATE NOT NULL,
    review_declare_state VARCHAR(255),
    FOREIGN KEY (rs_review_id) REFERENCES rs_review(rs_review_id)
);

CREATE TABLE queue_order (
   queue_order_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   queue_id BIGINT NOT NULL,
   cart_id BIGINT NOT NULL,
   total_amount INT,
   user_id BIGINT NOT NULL,
   order_date_time DATETIME,
   order_status VARCHAR(255),
   rs_id BIGINT,
   payment_id BIGINT UNIQUE,
   FOREIGN KEY (queue_id) REFERENCES queue(queue_id),
    FOREIGN KEY (cart_id) REFERENCES cart(cart_id),
    FOREIGN KEY (user_id) REFERENCES user(user_id),
    FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

CREATE TABLE queue_order_item (
   queue_order_item_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   queue_order_item_amount INT,
   queue_order_item_price INT,
   rs_menu_id BIGINT,
   queue_order_id BIGINT,
   FOREIGN KEY (rs_menu_id) REFERENCES rs_menus(rs_menu_id),
   FOREIGN KEY (queue_order_id) REFERENCES queue_order(queue_order_id)
);

CREATE TABLE cart_item (
   cart_item_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   cart_item_amount INT,
   cart_id BIGINT,
   rs_menu_id BIGINT,
   FOREIGN KEY (cart_id) REFERENCES cart(cart_id),
   FOREIGN KEY (rs_menu_id) REFERENCES rs_menus(rs_menu_id)
);

CREATE TABLE rs_reservation (
   rs_reservation_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   rs_reservation_party_size INT NOT NULL,
   rs_reservation_date DATE NOT NULL,
   rs_reservation_time DATETIME NOT NULL,
   rs_reservation_request VARCHAR(255),
   rs_reservation_state VARCHAR(255) NOT NULL,
   rs_reservation_created_at DATETIME NOT NULL,
   rs_reservation_updated_at DATETIME,
   rs_reservation_deleted_at DATETIME,
   rs_review_id BIGINT UNIQUE,
   rs_id BIGINT,
   user_id BIGINT,
   payment_id BIGINT UNIQUE,
   FOREIGN KEY (rs_review_id) REFERENCES rs_review(rs_review_id),
   FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id),
   FOREIGN KEY (user_id) REFERENCES user(user_id)
);
CREATE TABLE payment (
   payment_id BIGINT AUTO_INCREMENT PRIMARY KEY,
   payment_created_at DATETIME,
   payment_name VARCHAR(255),
   payment_method VARCHAR(255),
   payment_amount VARCHAR(255),
   payment_size VARCHAR(255),
   user_id BIGINT,
   rs_id BIGINT,
   queue_order_id BIGINT,  -- 줄서기 선결제
   rs_reservation_id BIGINT,  -- 예약금 결제
   payment_type ENUM('QUEUE', 'RESERVATION') NOT NULL,
   FOREIGN KEY (user_id) REFERENCES user(user_id),
    FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id),
    FOREIGN KEY (queue_order_id) REFERENCES queue_order(queue_order_id),
    FOREIGN KEY (rs_reservation_id) REFERENCES rs_reservation(rs_reservation_id)
);

CREATE TABLE rs_review_comment (
rs_comment_id BIGINT AUTO_INCREMENT PRIMARY KEY,
rs_comment_content VARCHAR(255) NOT NULL,
rs_comment_state VARCHAR(255),
rs_comment_created_at DATETIME NOT NULL,
rs_comment_updated_at DATETIME,
rs_comment_deleted_at DATETIME,
rs_parent_comment_id BIGINT,
rs_comment_depth BIGINT,
rs_review_id BIGINT NOT NULL,
user_id BIGINT NOT NULL,
rs_id BIGINT NOT NULL,
FOREIGN KEY (rs_review_id) REFERENCES rs_review(rs_review_id),
FOREIGN KEY (user_id) REFERENCES user(user_id),
FOREIGN KEY (rs_id) REFERENCES rs_restaurant(rs_id)
);

ALTER TABLE payment
ADD COLUMN payment_status VARCHAR(255);

ALTER TABLE rs_group
MODIFY COLUMN rs_group_deleted_at datetime(6);
ALTER TABLE rs_group
MODIFY COLUMN rs_group_created_at datetime(6);
ALTER TABLE rs_group
MODIFY COLUMN rs_group_updated_at datetime(6);

ALTER TABLE rs_menus
ADD COLUMN is_featured BOOLEAN DEFAULT FALSE;

ALTER TABLE rs_restaurant
ADD COLUMN rs_deposit_amount DECIMAL(10, 2) DEFAULT 0;

ALTER TABLE rs_restaurant
MODIFY COLUMN rs_deposit_amount INTEGER DEFAULT 0;

ALTER TABLE rs_restaurant
ADD COLUMN rs_deposit_required BOOLEAN DEFAULT FALSE;

ALTER TABLE rs_review
ADD COLUMN rs_review_content TEXT;

ALTER TABLE rs_review
MODIFY COLUMN rs_review_created_at datetime(6);
ALTER TABLE rs_review
MODIFY COLUMN rs_review_updated_at datetime(6);
ALTER TABLE rs_review
MODIFY COLUMN rs_review_deleted_at datetime(6);

ALTER TABLE rs_review
ADD COLUMN rs_review_deleted_at datetime(6),
ADD COLUMN rs_review_updated_at datetime(6);

ALTER TABLE user
ADD COLUMN user_role VARCHAR(255);

==========================================================================================

{
    "queueId": 1,
    "queueNumber": 4,
    "queueDate": "2024-12-06",
    "queueTime": "12:30:00",
    "queueState": "waiting",
    "queueCreatedAt": "2024-12-06T12:14:00",
    "queueUpdatedAt": null,
    "queueDeletedAt": null,
    "rsId": 2,
    "userId": 3
}

==========================================================================================

SELECT * FROM eattogether.queue;
SELECT * FROM eattogether.user;
SELECT * FROM eattogether.rs_restaurant;
select * from eattogether.cart;
select * from eattogether.payment;

UPDATE queue
SET queue_state = 'waiting'
WHERE queue_id = 1 AND queue_state = 'entered';

UPDATE queue
SET queue_state = 'waiting'
WHERE queue_id = 1 AND queue_state = 'cancled';